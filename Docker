# Use an official Python runtime as a parent image
FROM python:3.9-slim-buster

# Set the working directory to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app

# Install any needed dependencies
RUN pip install --trusted-host pypi.python.org -r requirements.txt

# Make port 80 available to the world outside this container
EXPOSE 80

# Define environment variable
ENV NAME World

# Run app.py when the container launches
CMD ["python", "app.py"]

This Dockerfile uses the official Python 3.9 slim-buster image as a base, sets the working directory to /app, copies the contents of the current directory into the container, installs any necessary dependencies using pip, exposes port 80, sets an environment variable, and runs app.py as the entrypoint for the container.

To build the Docker image, we can use the following command:

arduino

docker build -t <image-name> .

To run the Docker container, we can use the following command:

arduino

docker run -p 4000:80 <image-name>

This command maps port 80 in the container to port 4000 on the host machine, allowing us to access the application at http://localhost:4000.
